server {
  charset utf-8;
  client_max_body_size 128M;
  sendfile off;

  listen 80; ## listen for ipv4
  #listen 443 ssl http2;

  #listen [::]:80 default_server ipv6only=on; ## listen for ipv6

  server_name "" localhost;

  #ssl_protocols       TLSv1 TLSv1.1 TLSv1.2; # SSLv3 исключить CVE-2014-3566
  
  #ssl_certificate /etc/letsencrypt/live/sitescreen.ru/fullchain.pem;
  #ssl_certificate_key /etc/letsencrypt/live/sitescreen.ru/privkey.pem;
  #ssl_trusted_certificate /etc/letsencrypt/live/sitescreen.ru/chain.pem;

  root        /app/dist/;
  index       index.html;

  access_log  /logs/access.log;
  error_log   /logs/error.log;

  #==========================================
  #
  # Let's Encrypt 
  #
  #==========================================
  location /.well-known {
      root /app/frontend/;
  }

  
  #==========================================
  #
  # WEB 
  #
  #==========================================
  location / {
    try_files $uri @prerender;
  }

  location @prerender {
      #proxy_set_header X-Prerender-Token YOUR_TOKEN;
      
      set $prerender 0;
      if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
          set $prerender 1;
      }
      if ($args ~ "_escaped_fragment_") {
          set $prerender 1;
      }
      if ($http_user_agent ~ "Prerender") {
          set $prerender 0;
      }
      if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
          set $prerender 0;
      }
      
      #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
      #resolver 8.8.8.8;

      if ($prerender = 1) {
          rewrite .* /static.html break;
      }
      if ($prerender = 0) {
          rewrite .* /index.html break;
      }
  }

  location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    # Some basic cache-control for static files to be sent to the browser
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    # Some basic cache-control for static files to be sent to the browser
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  #==========================================
  #
  # API 
  #
  #==========================================
  location /api {
  #location ~/api(.*)$ {
        proxy_pass http://blog_api:8888;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
  }

  #==========================================
  #
  # Yandex Kassa 
  #
  #==========================================
  location /order {
  #location ~/order(.*)$ {
        proxy_pass http://api:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
  }
}
